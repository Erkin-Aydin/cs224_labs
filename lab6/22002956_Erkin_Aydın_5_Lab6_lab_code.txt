#CS224
#Lab No: 6
#Section No: 5
#Erkin Aydın
#ID: 22002956
#Date: 27/4/2022

#########################################################
####################### Matrix Operations- Lab 6
#########################################################



#CAUTION! PLEASE DO NOT START GRADING IT BEFORE READING THESE LINES! CAUTION!(sorry for capital letters, my intention is not shouting).
#There are some design choices that may confuse you, here is a list of them:
#1) When a new matrix is allocated(including the copy operation), the previous matrixes are NOT overwritten, 
#independent of their sizes. They remain there, you can check them through memory.
#3) Let's assume that you did as indicated at part 1): You created a matrix, and then you created one more matrix. First matrix that was created
#is not valid anymore, but it remains in the memory, as it is not overwrittten. You can't reach it, though(technically you can by checking where 
#it starts from the memory, if you remember the values that you chose to insert, but this is a torture to do.).
#3) In the fift operation(copying a matrix), the last created matrix(except matrixes created by copy operation)
#is copied. Here are some examples:
#3.a) Let's assume that you create a 3x3 matrix, called A. Then, you create a 4x4 matrix, called B. If you choose the fifth option from the menu,
#then the B matrix will be copied.
#3.b) Let's assume that you did everything in part 3.a), and decided to choose fifth option from the menu, which is copy operation, again.
#Then, the matrix named B will be copied, again. Not it's copy.
#4) Operation 3, 4, and 5 should NOT be used before any matrix is not created, that is, they shouldn't be used before any of the operation 1 or
# 2 is executed. CAUTION! I DID NOT HANDLE NON-EXİSTENT MATRIX AND OPERATİON 3-4-5 SITUATIONS! CAUTION!(sorry for capital letters, my intention is not shouting)
#5) Throughout the program, $s5 will be the address of the last created matrix(excluding copy ones), $s6 will be $s5's dimension, and
#$s7 will be the last copy matrix'sbeginning address
#CAUTION! PLEASE DO NOT START GRADING IT BEFORE READING THESE LINES! CAUTION!(sorry for capital letters, my intention is not shouting).
	.text		
.globl __start
 
__start:				# execution starts here
					
					#$s5 will hold the address of the matrix.
					#$s6 will hold the dimension of the matrix
					#$s7 = address of the copy, if anything is copied.
	addi 	$s0, $0, 1		#$s0 = 1.
	addi 	$s1, $0, 2		#$s1 = 2.
	addi 	$s2, $0, 3		#$s2 = 3.
	addi 	$s3, $0, 4		#$s3 = 4.
	addi 	$s4, $0, 5		#$s4 = 5.
	
MenuStart:
	la 	$a0, menu		#printing "Menu:"
	li 	$v0, 4
	syscall
	
	la 	$a0, prompt1		#printing "1) Enter the matrix dimension(N), and then enter elements row by row\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, prompt2		#printing "2) Enter the matrix dimension(N) and initialize matrix with consecutive values\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, prompt3		#printing "3) Display the desired element of the matrix\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, prompt4		#printing "4) Display entire matrix row by row\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, prompt5		#printing "5) Copy a matrix to another matrix\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, prompt6		#printing "Anything other then 1-2-3-4-5) Quit\n"
	li 	$v0, 4
	syscall	
	
	la 	$a0, enter		#printing "Enter your choice: "
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#waiting for the input
	syscall
	
	bne 	$s0, $v0, second
	jal 	one
	j 	MenuStart
second:	bne 	$s1, $v0, third
	jal 	two
	j 	MenuStart
third:	bne 	$s2, $v0, fourth
	jal 	three
	j 	MenuStart
fourth:	bne 	$s3, $v0, fifth
	jal 	four
	j 	MenuStart
fifth:	bne 	$s4, $v0, out
	jal 	five
	j 	MenuStart
	
out:	li 	$v0,10  		# system call to exit
	syscall				#bye bye
	
####################################################
#This is for operation 1
####################################################	
one: 
	addi 	$sp, $sp, -12		#saving necessary values to stack
	sw 	$s0, 0($sp)
	sw 	$s1, 4($sp)
	sw 	$s2, 8($sp)
	
	la 	$a0, askdim		#asking dimension
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#waiting for the input
	syscall
	
	move 	$s6, $v0		#$s6 = dimension
	mul 	$t0, $s6, $s6		#$t0 = square of the dimension
	sll 	$t0, $t0, 2		#since it allocates bytewise, we need to multiply with 4, as a word is 32-bits, but a byte is 8-bits
	
	move 	$a0, $t0		#making the allocation
	li 	$v0, 9
	syscall
	
	move 	$s5, $v0		#moving the address of the array to $s5
	
	add 	$s0, $0, $0		#$s0 = 0(for iteration purposes)
	move 	$s1, $s5		#$s1 = address of the matrix(for iteration purposes)
	mul 	$s2, $s6, $s6		#$s2 = square of the dimension(for iteration purposes)
	
oneloop:
	
	la 	$a0, prompt1sub		#asking user to enter a row element
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#waiting for the next row element
	syscall
	
	sw 	$v0, 0($s1)		#storing the word to the address
	
	addi 	$s1, $s1, 4		#incrementing address by 4 for iteration
	addi 	$s0, $s0, 1		#incrementing number of elements stored by 1 for iteration
	bne 	$s0, $s2, oneloop	#checking whether all the values are stored
	
	lw 	$s0, 0($sp)		#restoring values of $s0, $s1 and $s2
	lw 	$s1, 4($sp)
	lw 	$s2, 8($sp)
	addi 	$sp, $sp, 12		#restoring the stack pointer
	jr 	$ra

####################################################
#This is for operation 2
####################################################	
two:
	addi 	$sp, $sp, -12		#saving necessary values to stack
	sw 	$s0, 0($sp)
	sw 	$s1, 4($sp)
	sw 	$s2, 8($sp)
	
	la 	$a0, askdim		#asking dimension
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#waiting for the input
	syscall
	
	move 	$s6, $v0		#$s6 = dimension
	mul 	$t0, $s6, $s6		#$t0 = square of the dimension
	sll 	$t0, $t0, 2		#since it allocates bytewise, we need to multiply with 4, as a word is 32-bits, but a byte is 8-bits
	
	move 	$a0, $t0		#making the allocation
	li 	$v0, 9
	syscall
	
	move 	$s5, $v0		#moving the address of the array to $s5
	
	add 	$s0, $0, $0		#$s0 = 0(for iteration and storing purposes)
	move 	$s1, $s5		#$s1 = address of the matrix(for iteration purposes)
	mul 	$s2, $s6, $s6		#$s2 = square of the dimension(for iteration purposes)
	
twoloop:
	addi 	$s0, $s0, 1
	
	sw 	$s0, 0($s1)		#storing the word to the address
	
	addi 	$s1, $s1, 4
	bne 	$s0, $s2, twoloop		
	
	lw 	$s0, 0($sp)		#restoring values of $s0, $s1 and $s2
	lw 	$s1, 4($sp)
	lw 	$s2, 8($sp)
	addi 	$sp, $sp, 12		#restoring the stack pointer
	jr 	$ra

####################################################
#This is for operation 3
####################################################
three:
	addi 	$sp, $sp, -12		#saving necessary values to stack
	sw 	$s0, 0($sp)
	sw 	$s1, 4($sp)
	sw 	$s5, 8($sp)
	
	la 	$a0, prompt3sub1	#printing "Enter row number: "
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#taking the row number as input
	syscall
	
	move 	$s0, $v0
	
	la 	$a0, prompt3sub2	#printing "Enter column number: "
	li 	$v0, 4
	syscall
	
	li 	$v0, 5			#taking the column number as input
	syscall
	
	addi 	$s0, $s0, -1		#$s0 = i - 1
	sll 	$s0, $s0, 2		#$s0 = 4 x (i - 1)
	mul 	$s0, $s0, $s6		#$s0 = 4 x N x (i - 1)
	addi 	$v0, $v0, -1		#$v0 = j - 1
	sll 	$v0, $v0, 2		#$v0 = 4 x (j - 1)
	add 	$s0, $s0, $v0		#$s0 = (i - 1) x N x 4 + (j - 1) x 4
	add 	$s5, $s5, $s0		#address of the matrix element
	
	la 	$a0, prompt3sub3	#printing "Here is the element: "
	li 	$v0, 4
	syscall
	
	lw 	$a0, 0($s5)		#printing the element
	li 	$v0, 1
	syscall

	la 	$a0, endl		#we go to the next line
	li 	$v0, 4
	syscall
		
	lw 	$s0, 0($sp)		#restoring values of $s0, $s1 and $s2
	lw 	$s1, 4($sp)
	lw 	$s5, 8($sp)
	addi 	$sp, $sp, 12		#restoring the stack pointer
	jr 	$ra

####################################################
#This is for operation 4
####################################################
four:
	addi 	$sp, $sp, -16		#saving necessary values to stack
	sw 	$s0, 0($sp)
	sw 	$s1, 4($sp)
	sw 	$s2, 8($sp)
	sw 	$s5, 12($sp)		#$s5 = beginning address of the matrix
	
	add 	$s0, $0, $0		#$s0 = 0(for iteration purposes)
	mul 	$s2, $s6, $s6		#$s2 = square of the dimension(for iteration purposes)
	
fourloop:
	lw 	$a0, 0($s5)		#printing the value
	li 	$v0, 1
	syscall
	
	addi 	$s5, $s5, 4		#incrementing the address value by for for the next print operation
	addi 	$s0, $s0, 1		#number of printed elements
	
	la 	$a0, tab		#a "tab" amount of space for matrix elements
	li 	$v0, 4
	syscall
	
	div 	$s0, $s6		#this is for checking whether we reachet to the end of the row
	mfhi 	$t0			#$t0 = 0 if we reached to the end of the row 
	bne 	$t0, $0, nonextline	#if we reached to the end of the row, we go to the next line; if not, we don't
	la 	$a0, endl		#to the next line we go
	li 	$v0, 4
	syscall
	
	
nonextline:
	bne 	$s0, $s2, fourloop
	
	lw 	$s0, 0($sp)		#restoring values of $s0, $s1 and $s5
	lw 	$s1, 4($sp)
	lw 	$s2, 8($sp)
	lw 	$s5, 12($sp)
	addi 	$sp, $sp, 16		#restoring the stack pointer
	jr 	$ra

####################################################
#This is for operation 5
####################################################
five:
	addi 	$sp, $sp, -20		#saving necessary values to stack
	sw 	$s0, 0($sp)
	sw 	$s1, 4($sp)
	sw 	$s2, 8($sp)
	sw 	$s3, 12($sp)
	sw 	$s5, 16($sp)
	
	move 	$a0, $s6
	mul 	$a0, $a0, $a0		#finding the number of words for the new matrix
	move 	$s1, $a0		#$s1 = number of words in the matrix
	sll 	$a0, $a0, 2		#$a0 = needed byte amount
	li 	$v0, 9			#making the allocation
	syscall
	
	move 	$s7, $v0		#$s7 = address of the copy
	move 	$t0, $s7		#$t0 = $s7(for iteration purposes)
	add 	$s0, $0, $0		#$s0 = 0(for iteration purposes)
	
	la 	$a0, prompt5sub
	li 	$v0, 4
	syscall
	
	li 	$v0, 5
	syscall
	
	bne 	$v0, $0, fiveloopcolumn
	
fivelooprow:				#this executes when we will copy row wise
	addi 	$s0, $s0, 1
	lw 	$t1, 0($s5)		#$t1 = value to be copied
	sw 	$t1, 0($t0)
	addi 	$s5, $s5, 4		#incrementing addresses
	addi 	$t0, $t0, 4		#incrementing addresses
	bne 	$s0, $s1, fivelooprow
	j 	fivedonerow

fiveloopcolumn:				#this executes when we will copy row wise
	addi 	$t2, $0, 1		#this is the row number
					#this will increase each time a new value will be stored. If we reach to the end of the column, then
					#$t2 is set to 1, $t3 is incremented by 1 to iterate over the next column
	addi 	$t3, $0, 1		#this is the column number
	
					#if both row and column numbers are equal to the dimension, then the copy operation is done.
					
	addi 	$sp, $sp, -8		#creating space in the stack for column and row addresses
	
columnloop:
	sw 	$t2, 0($sp)
	sw 	$t3, 4($sp)
	
	addi	$t2, $t2, -1		#$t2 = i - 1
	sll 	$t2, $t2, 2		#$t2 = 4 x (i - 1)
	mul 	$t2, $t2, $s6		#$t2 = 4 x N x (i - 1)
	addi	$t3, $t3, -1		#$t3 = j - 1
	sll 	$t3, $t3, 2		#$t3 = 4 x (j - 1)
	add 	$s2, $t2, $t3		#$t2 = (i - 1) x N x 4 + (j - 1) x 4
	add 	$s3, $s5, $s2		#address of the matrix element
	
	lw 	$t4, 0($s3)		#retrieving the data from the column
	add 	$s2, $t0, $s2		#calculating the insert address
	sw 	$t4, 0($s2)		#inserting the value
	
	lw 	$t2, 0($sp)		#storing the coordinates
	lw 	$t3, 4($sp)
	
	beq 	$t2, $s6, isfivedone	#checking whether a column is done
	addi 	$t2, $t2, 1
	j 	columnloop
isfivedone:
	beq 	$t3, $s6, fivedone	#checking whether all numbers are inserted
					#if both row and column numbers are equal to the dimension, then the copy operation is done.
	addi 	$t2, $0, 1
	addi 	$t3, $t3, 1
	j 	columnloop

	
fivedone:
	addi 	$sp, $sp, 8		#this is to restore spaces allocated for $t2 and $t3, row and column numbers
fivedonerow:
	lw 	$s0, 0($sp)		#restoring values of $s0, $s1 and $s5
	lw 	$s1, 4($sp)
	lw 	$s2, 8($sp)
	lw 	$s3, 12($sp)
	lw 	$s5, 16($sp)
	addi 	$sp, $sp, 20		#restoring the stack pointer
	jr 	$ra
	
#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
menu: 		.asciiz "Menu:\n"
prompt1:	.asciiz "1) Enter the matrix dimension(N), and then enter elements row by row\n"
askdim:		.asciiz "Enter the matrix dimension: "
prompt1sub:	.asciiz	"Enter the elements row by row: "
prompt2:	.asciiz "2) Enter the matrix dimension(N) and initialize matrix with consecutive values\n"
prompt3:	.asciiz "3) Display the desired element of the matrix\n"
prompt3sub1:	.asciiz	"Enter row number: "
prompt3sub2:	.asciiz	"Enter column number: "
prompt3sub3:	.asciiz "Here is the element: "
prompt4:	.asciiz "4) Display entire matrix row by row(you can see all the values up to 30x30 matrices, dimention 30, if you extend Run I/O all the way to the right)\n"
prompt5:	.asciiz "5) Copy a matrix to another matrix\n"
prompt5sub:	.asciiz "Row wise(0) or column wise(any nonzero value)? Enter:"
prompt6:	.asciiz "6) Quit\n"
enter:		.asciiz	"Enter your choice: "
endl:		.asciiz "\n"
tab:		.asciiz "	"


