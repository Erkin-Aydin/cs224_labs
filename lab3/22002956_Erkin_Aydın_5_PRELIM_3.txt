CS224
Lab No:3
Section No:5
Erkin Ayd覺n
ID:22002956
Date:15/03/2022

#########################################################
####################### pre_lab3
#########################################################

	.text		
.globl __start
 
__start:				# execution starts here
	
	addi $s6, $0, 0x10040000	#a random address for random operations

	#some random operations
L1:	lw $t7, 0($s6)
	add $t8, $t8, $t9
	ori $t7, $s6, 16	
	add $t9, $t8, $t7		
	ori $t7, $s5, 12		
	ori $t7, $s6, 16
	add $t9, $t8, $t7
	lw $t7, 0($s6)		
	lw $t6, 4($s6)
	ori $t7, $s6, 16
L2:	lw $t6, 8($s6)
	#the end of some random operations		
	
	la $a0, L1
	la $a1, L2	#passing parameters
	jal instructionCount
	move $s0, $v0
	move $s1, $v1
	move $s2, $t3
	
	la $a0, prompt1
	li $v0, 4
	syscall			#"Add count: "
	
	move $a0, $s0
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall			#to the next line we go
	
	la $a0, prompt2
	li $v0, 4
	syscall			#"Ori count: "
	
	move $a0, $s1
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall			#to the next line we go
	
	la $a0, prompt3
	li $v0, 4
	syscall			#"Lw count: "
	
	move $a0, $s2
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall			#to the next line we go
	
ask:	la $a0, prompt4
	li $v0, 4
	syscall			#"Enter dividend: "
	
	li $v0, 5
	syscall
	
	move $s0, $v0
	
	la $a0, prompt5
	li $v0, 4
	syscall			#"Enter divider: "
	
	li $v0, 5
	syscall
	
	move $s1, $v0
	
	move $a0, $s0
	move $a1, $s1		#passing parameters
	move $v0, $0		#making sure $v0 is 0 as it will be the returned value
	jal recursiveDivision
	
	move $s0, $v0
	
	la $a0, prompt6
	li $v0, 4
	syscall			#"Result: "
	
	move $a0, $s0
	li $v0, 1
	syscall			#printing the result of division
	
	la $a0, endl
	li $v0, 4
	syscall		#to the next line we go
	
	la $a0, prompt7
	li $v0, 4
	syscall		#asking the user whether they ant to try another pair of numbers
	
	li $v0, 5
	syscall
	
	bne $v0, $0, ask	#if their answer is 0, then goodbye, if nonzero, we take another pair of numbers
	
	j end
	
	
instructionCount:
	move $s0, $a0
	move $s1, $a1
	addi $s1, $s1, 4	#for set less than operation
	move $t1, $0 		#and count
	move $t2, $0		#ori count
	move $t3, $0		#lw count
	addi $s3, $0, 0x00000020 #and
	addi $s4, $0, 0x34000000 #ori
	addi $s5, $0, 0x8c000000 #lw
	
instructionIteration:	
	lw $s2, ($s0)
isAnd:					#checking whether it is an And
	and $t0, $s2, $s3
	bne $t0, $s3, isOri
	addi $t1, $t1, 1
	j instructionIncrement		#if so, jump t覺 instructionCount
	
isOri:					#checking whether it is an Ori
	and $t0, $s2, $s4
	bne $t0, $s4, isLw
	addi $t2, $t2, 1
	j instructionIncrement		#if so, jump t覺 instructionCount
	
isLw:					#checking whether it is an Lw
	and $t0, $s2, $s5
	bne $t0, $s5, instructionIncrement
	addi $t3, $t3, 1
	j instructionIncrement		#if so, jump t覺 instructionCount
	
instructionIncrement:
	addi $s0, $s0, 4
	slt $t4, $s0, $s1
	bne $t4, $0, instructionIteration	#if we did not exceed the boundry yet, we continue iteration
	move $v0, $t1
	move $v1, $t2
	
recursiveDivision:	
	addi $sp, $sp, -8
	sw $a0, 4($sp)		#num to be divided
	sw $ra, 0($sp)		#return address
	slt $t0, $a0, $a1
	beq $t0, $0, else
	
	addi $sp, $sp, 8
	jr $ra
else:	sub $a0, $a0, $a1	
	jal recursiveDivision
	
	addi $v0, $v0, 1
	lw $ra, 0($sp)
	addi $sp, $sp, 8
	jr $ra
		
end:	li $v0,10  			# system call to exit
	syscall				#bye bye
	
#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt1:	.asciiz "Add count: "
prompt2:	.asciiz "Ori count: "
prompt3:	.asciiz "Lw count: "
prompt4:	.asciiz "Enter dividend: "
prompt5:	.asciiz "Enter divider: "
prompt6:	.asciiz "Result: "
prompt7:	.asciiz "Would you like to enter another pair(0 if no, a nonzero value if yes): "
endl:		.asciiz "\n"

##
## end of pre_lab3.asm

