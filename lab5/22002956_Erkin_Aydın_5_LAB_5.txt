`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/12/2022 06:52:32 PM
// Design Name: 
// Module Name: top_mips
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these values on the waveform for grading
module top_mips (input  logic        clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             output logic [2:0]  alucontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE,
             output logic ForwardAD, ForwardBD);


	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************
	
    controller c (instrD[31:26], instrD[5:0], 
                  MemtoRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD, alucontrol, BranchD);

    datapath dp (clk, reset, alucontrol, RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
               instrF, instrD, PC, PCF, PcSrcD, ALUOutE, WriteDataE, ForwardAE, ForwardBE, ForwardAD, ForwardBD);
  
  
endmodule

// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                        if(clear) // Can clear only if the pipe is enabled, that is, if it is not stalling.
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else
                    begin
                        instrD<=instr;
                        PcPlus4D<=PcPlus4F;
                        end
                end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule

module PipeDtoE(input logic[31:0] RD1, RD2, RD3, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, RdData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic[2:0] ALUControlE);

        always_ff @(posedge clk, posedge reset)
          if(reset || clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RdData <= RD3;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                end

endmodule

module PipeEtoM(input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic[31:0] ALUOutE, WriteDataE,
                input logic[4:0] WriteRegE,
                input logic clk, reset,
                output logic RegWriteM, MemtoRegM, MemWriteM,
                output logic[31:0] ALUOutM, WriteDataM,
                output logic[4:0] WriteRegM);
                
                always_ff @(posedge clk, posedge reset)
          if(reset)
                begin
                // Control signals
                RegWriteM <= 0;
                MemtoRegM <= 0;
                MemWriteM <= 0;
                
                // Data
                ALUOutM <= 0;
                WriteDataM <= 0;
                WriteRegM <= 0;
                end
            else
                begin
                // Control signals
                RegWriteM <= RegWriteE;
                MemtoRegM <= MemtoRegE;
                MemWriteM <= MemWriteE;
                
                
                // Data
                ALUOutM <= ALUOutE;
                WriteDataM <= WriteDataE;
                WriteRegM <= WriteRegE;
                end
endmodule

module PipeMtoW(input logic RegWriteM, MemToRegM,
                input logic[31:0] ReadDataM, ALUOutM, 
                input logic[4:0] WriteRegM,
                input logic clk, reset,
                output logic RegWriteW, MemToRegW,
                output logic[31:0] ReadDataW, ALUOutW,
                output logic[4:0] WriteRegW);
                
                always_ff @(posedge clk, posedge reset)
          if(reset)
                begin
                // Control signals
                RegWriteW <= 0;
                MemToRegW <= 0;
                
                // Data
                ReadDataW <= 0;
                ALUOutW <= 0;
                WriteRegW <= 0;
                end
            else
                begin
                // Control signals
                RegWriteW <= RegWriteM;
                MemToRegW <= MemToRegM;                
                
                // Data
                ReadDataW <= ReadDataM;
                ALUOutW <= ALUOutM;
                WriteRegW <= WriteRegM;
                end
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmD to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PcBranchD
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                 output logic [31:0] InstrF,		
                 output logic [31:0] InstrD, PC, PCF,
                output logic PCSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD); // Add or remove input-outputs if necessary

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F, four;
    assign four = 32'h00000004; 
    assign PCSrcD = 2'b0;
  
	//* You should define others down below
    logic zero;
    
        
    //For Decode Stage
    logic EqualD;
    logic [31:0] RD1, RD2, RD3, SignImmD, ShiftedSignImmD, PCPlus4D, BranchCompA, BranchCompB;
    
    //For Execute Stage
    logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE;
    logic [2:0] ALUControlE;
    logic [4:0] RsE, RtE, RdE, WriteRegE;
    logic [31:0] RsData, RtData, RdData, SignImmE;
    logic [31:0] SrcAE, SrcBE, SrcCE;
    
    //For Memory stage
    logic RegWriteM, MemtoRegM, MemWriteM;
    logic [4:0] WriteRegM;
    logic [31:0] ALUOutM, WriteDataM, ReadDataM;
    
    //For Writeback stage
    logic RegWriteW, MemtoRegW;
    logic [4:0] WriteRegW;
    logic [31:0] ReadDataW, ALUOutW, ResultW;
    
    //Hazard Unit
    logic StallF, StallD, FlushE;    
    logic [31:0] ForwardCE;
    
	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************

    adder add(PCF, four, PcPlus4F);
  	mux2 #(32) pc_mux(PcPlus4F, PcBranchD, PCSrcD, PC);
    PipeWtoF pipe1(PC, ~StallF, clk, reset, PCF);

    imem im1(PCF[7:2], InstrF);
     
  	// Instantiate PipeFtoD
  	
  	PipeFtoD pipe2( InstrF, PcPlus4F, ~StallD, PCSrcD, clk, reset, InstrD, PCPlus4D);
  
  	// Do some operations
    signext se(InstrD[15:0], SignImmD);
    sl2 shiftLeft(SignImmD, ShiftedSignImmD);
    assign PcBranchD = ShiftedSignImmD + PCPlus4D;
    
    regfile regFile(clk, reset, RegWriteW, InstrD[25:21], InstrD[20:16], InstrD[15:11], WriteRegW, ResultW,
            RD1, RD2, RD3);
            
    mux2 #(32) m1(RD1, ALUOutM, ForwardAD, BranchCompA);
    mux2 #(32) m2(RD2, ALUOutM, ForwardBD, BranchCompB);
    assign EqualD = BranchCompA == BranchCompB;
    and anAnd (BranchD, EqualD, PCSrcD);
  
  
  	// Instantiate PipeDtoE
    PipeDtoE pipe3(RD1, RD2, RD3, SignImmD, InstrD[25:21], InstrD[20:16], InstrD[15:11], 
                   RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, ALUControlD, 
                   FlushE, clk, reset, RsData, RtData, RdData, SignImmE, RsE, RtE, RdE,
                   RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE, ALUControlE);  
  
  	// Do some operations
  	
  	mux2 #(5) m3(RtE, RdE, RegDstE, WriteRegE);
    
    mux4 #(32) m4(RsData, ResultW, ALUOutM, 0, ForwardAE, SrcAE);//0 problem?
    mux4 #(32) m5(RtData, ResultW, ALUOutM, 0, ForwardBE, WriteDataE);
    mux2 #(32) m6(WriteDataE, SignImmE, ALUSrcE, SrcBE);
    
    alu curAlu(SrcAE, SrcBE, SrcCE, ALUControlE, ALUOutE, zero);//0 problem?
    
  	// Instantiate PipeEtoM
    PipeEtoM pipe4(RegWriteE, MemtoRegE, MemWriteE, ALUOutE, WriteDataE, WriteRegE, clk, reset,
                    RegWriteM, MemtoRegM, MemWriteM, ALUOutM, WriteDataM, WriteRegM);
  
  	// Do some operations
  	
  	dmem curMem(clk, MemWriteM, ALUOutM, WriteDataM, ReadDataM);

  	// Instantiate PipeMtoW
    PipeMtoW pipe5(RegWriteM, MemtoRegM, ReadDataM, ALUOutM, WriteRegM,clk, reset,
                   RegWriteW, MemtoRegW, ReadDataW, ALUOutW, WriteRegW);
                   
  	// Do some operations
    mux2 #(32) m7( ALUOutW, ReadDataW, MemtoRegW, ResultW);
    mux4 #(32) m8(RdData, ResultW, ALUOutM, 0, ForwardCE, SrcCE);
    
    //Hazard Unit instance
    HazardUnit hazard(RegWriteM, BranchD, WriteRegW, WriteRegE, RegWriteM,MemtoRegM,
                WriteRegM, RegWriteE,MemtoRegE, RsE, RtE, RdE, InstrD[25:21], InstrD[20:16], InstrD[15:11],
                ForwardAE, ForwardBE, ForwardCE, FlushE, StallD, StallF, ForwardAD, ForwardBD);

endmodule

module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE, rdE,
                input logic [4:0] rsD,rtD, rdD,
                output logic [1:0] ForwardAE,ForwardBE, ForwardCE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
    
    logic lwstall, branchstall;
    always_comb begin
        
        //These parts are from 421^th page of the book
        lwstall = ((rsD == rsE) | (rtD == rtE) | (rdD == rdE)) & MemtoRegE;
        branchstall =
    BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD) | BranchD & MemtoRegM & (WriteRegM == rsD & WriteRegM == rtD);
        StallF = lwstall | branchstall;
        StallD = lwstall | branchstall;
        FlushE = lwstall | branchstall;
        
        //These parts are from 418^th page of the book
        //For ForwardAE
        if((rsE != 0) & (rsE == WriteRegM) & RegWriteW) begin
            ForwardAE = 2'b10;
        end
        else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW) begin
            ForwardAE = 2'b01;
        end
        else begin
            ForwardAE = 2'b00;
        end
        //For ForwardBE
        if((rtE != 0) & (rtE == WriteRegM) & RegWriteW) begin
            ForwardBE = 2'b10;
        end
        else if ((rtE != 0) & (rtE == WriteRegW) & RegWriteW) begin
            ForwardBE = 2'b01;
        end
        else begin
            ForwardBE = 2'b00;
        end
        //For ForwardCE
        if((rdE != 0) & (rdE == WriteRegM) & RegWriteW) begin
            ForwardCE = 2'b10;
        end
        else if ((rdE != 0) & (rdE == WriteRegW) & RegWriteW) begin
            ForwardCE = 2'b01;
        end
        else begin
            ForwardCE = 2'b00;
        end
        //These parts are from 424^th page of the book
        
        ForwardAD = ((rsD != 0) & (rsD == WriteRegM) & RegWriteM);
        ForwardBD = ((rtD != 0) & (rtD == WriteRegM) & RegWriteM);

    end
endmodule



// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//  An example test program is given below.        
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
       // Test code for no hazards
8'h00: instr = 32'h20080005;     //20080005
8'h04: instr = 32'h20090003;     //20090003
8'h08: instr = 32'h11090002;     //11090002    
8'h0c: instr = 32'h01285020;     //01285020
8'h10: instr = 32'h01498024;     //01498024
8'h14: instr = 32'h2129FFFF;     //0151902A
8'h18: instr = 32'h11280002;     //02318820
8'h1c: instr = 32'hAC0A0050;     //02329822
8'h20: instr = 32'h01284025;     //AD330074
8'h24: instr = 32'h0128482A;     //8C020080
8'h28: instr = 32'h11200002;     //8C020080
8'h2c: instr = 32'h8C0B0050;     //8C020080
8'h30: instr = 32'h01284024;     //8C020080
8'h34: instr = 32'h1108FFFF;     //8C020080
	   endcase
	   /*
	   la $t3, x #assume a data exists in the memory. not used here
       addi $t0, $0, 4
       addi $t1, $0, 16
       addi $t2, $0, 2
       sracc $t0, $t1, $t2
       lw $t2, 0($t3)
       sracc $t0, $t1, $adder
	   */
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic [2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

  maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

  aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
  logic [7:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 8'b11000010; // R-type
      6'b100011: controls <= 8'b10100100; // LW
      6'b101011: controls <= 8'b00101000; // SW
      6'b000100: controls <= 8'b00010001; // BEQ
      6'b001000: controls <= 8'b10100000; // ADDI
      default:   controls <= 8'bxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          6'b111111: alucontrol =  3'b010; //Sracc
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, ra3, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2, rd3);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;
  	 else if(reset)
       for (int i=0; i<32; i++) rf[i] = {32{1'b0}};	

  assign rd1 = (ra1 != 0) ? rf[ ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;
  assign rd3 = (ra3 != 0) ? rf[ ra3] : 0;

endmodule

module alu(input  logic [31:0] a, b, c,
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b101: result = (a >> b) + c; //sracc
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule
